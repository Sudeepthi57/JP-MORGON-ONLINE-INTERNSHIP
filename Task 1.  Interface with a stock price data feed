import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv('housing_price_dataset.csv')  # Update with your actual file path if needed

# Display the first few rows of the dataset
print(data.head())

# Basic statistics and information
print(data.describe())
print(data.info())

# Check for missing values
missing_values = data.isnull().sum()
print("\nMissing values in each column:\n", missing_values)

# Handle missing values: fill missing values with mean for numeric columns
for column in data.select_dtypes(include=[np.number]):
    data[column].fillna(data[column].mean(), inplace=True)

# Ensure 'Price' column exists
if 'Price' in data.columns:
    # Plot correlation matrix (only numeric columns)
    numeric_data = data.select_dtypes(include=[np.number])
    plt.figure(figsize=(12, 10))
    sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
    plt.title('Correlation Matrix')
    plt.show()

    # Plot distribution of house prices
    sns.histplot(data['Price'], kde=True)
    plt.title('Distribution of House Prices')
    plt.xlabel('Price')
    plt.ylabel('Frequency')
    plt.show()
else:
    print("Column 'Price' not found in the dataset.")

# Convert categorical variables to dummy variables (e.g., 'Neighborhood')
if 'Neighborhood' in data.columns:
    data = pd.get_dummies(data, columns=['Neighborhood'], drop_first=True)

# Define features (X) and target variable (y)
X = data.drop('Price', axis=1)
y = data['Price']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'\nMean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plot predicted vs actual values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--', lw=2)
plt.show()
